r@peakAmpMatrix
r@primarySeq
r@primarySeqp[1:10]
r@primarySeq[1:10]
r@primarySeq[trim.start : trim.finish]
r@primarySeq = r@primarySeq[trim.start : trim.finish]
r
w = makeBaseCalls(r)
w
x = makeBaseCalls(s)
x
s
seq.abif = read.abif(fname)
trims = trim.mott(seq.abif, cutoff = trim.cutoff)
trim.cutoff = 0.01
seq.abif = read.abif(fname)
trims = trim.mott(seq.abif, cutoff = trim.cutoff)
seq = sangerseq(seq.abif)
seq
makeBaseCalls(seq)
seq@primarySeqID
egg = makeBaseCalls(seq)
egg@primarySeqID
seq = sangerseq(seq.abif)
seq@primarySeqID = "sangeranalyseR package subset basecalls"
seq@primarySeq = seq@primarySeq[start:end]
seq@secondarySeqID = "sangeranalyseR package subset basecalls"
seq@secondarySeq = seq@secondarySeq[start:end]
seq@traceMatrix = seq@traceMatrix
seq@peakPosMatrix = seq@peakPosMatrix[start:end]
seq@peakAmpMatrix = seq@peakAmpMatrix[start:end]
start = 1
end = 10
seq@primarySeqID = "sangeranalyseR package subset basecalls"
seq@primarySeq = seq@primarySeq[start:end]
seq@secondarySeqID = "sangeranalyseR package subset basecalls"
seq@secondarySeq = seq@secondarySeq[start:end]
seq@traceMatrix = seq@traceMatrix
seq@peakPosMatrix = seq@peakPosMatrix[start:end]
seq@peakAmpMatrix = seq@peakAmpMatrix[start:end]
seq = sangerseq(seq.abif)
seq@primarySeqID = "sangeranalyseR package subset basecalls"
seq@primarySeq = seq@primarySeq[start:end]
seq@secondarySeqID = "sangeranalyseR package subset basecalls"
seq@secondarySeq = seq@secondarySeq[start:end]
seq@traceMatrix = seq@traceMatrix
seq@peakPosMatrix = seq@peakPosMatrix[start:end,]
seq@peakAmpMatrix = seq@peakAmpMatrix[start:end,]
seq
makeBaseCalls(seq)
start = 400
end = 420
seq = sangerseq(seq.abif)
seq@primarySeqID = "sangeranalyseR package subset basecalls"
seq@primarySeq = seq@primarySeq[start:end]
seq@secondarySeqID = "sangeranalyseR package subset basecalls"
seq@secondarySeq = seq@secondarySeq[start:end]
seq@traceMatrix = seq@traceMatrix
seq@peakPosMatrix = seq@peakPosMatrix[start:end,]
seq@peakAmpMatrix = seq@peakAmpMatrix[start:end,]
seq
makeBaseCalls(seq)
seq
library(sangeranalyseR)
fwd.fnames
rev.fnames
make.readgroup(fwd.fnames, rev.fnames)
library(sangeranalyseR)
make.readgroup(fwd.fnames, rev.fnames)
library(sangeranalyseR)
make.readgroup(fwd.fnames, rev.fnames)
library(sangeranalyseR)
make.readgroup(fwd.fnames, rev.fnames)
make.readgroup(fwd.fnames, rev.fnames)
fname
read.abi = read.abif(fname)
read.sanger = sangerseq(read.abi)
if(trim == TRUE){
trims = trim.mott(seq.abif, cutoff = trim.cutoff)
trim.start = trims["trim.start"][[1]]
trim.finish = trims["trim.finish"][[1]]
}else if(trim == FALSE){
trim.start = 1
trim.finish = length(read.sanger@primarySeq)
}
trim
trim = TRUE
trim
read.abi = read.abif(fname)
read.sanger = sangerseq(read.abi)
if(trim == TRUE){
trims = trim.mott(seq.abif, cutoff = trim.cutoff)
trim.start = trims["trim.start"][[1]]
trim.finish = trims["trim.finish"][[1]]
}else if(trim == FALSE){
trim.start = 1
trim.finish = length(read.sanger@primarySeq)
}
trim.start
trim.finish
trim = FALSE
read.abi = read.abif(fname)
read.sanger = sangerseq(read.abi)
if(trim == TRUE){
trims = trim.mott(seq.abif, cutoff = trim.cutoff)
trim.start = trims["trim.start"][[1]]
trim.finish = trims["trim.finish"][[1]]
}else if(trim == FALSE){
trim.start = 1
trim.finish = length(read.sanger@primarySeq)
}
trim.start
trim.finish
read.final = read.sanger@primarySeq[trim.start:trim.finish]
read.final
read.sanger
fwd.fnames
fwd.fnames = c(fwd.fnames, "~/Desktop/testseq/Pan01/Raw sequencing files/DNA/0102_3HT-125minus.ab1")
fwd.fnames = c(fwd.fnames, "~/Desktop/testseq/Pan01/Raw sequencing files/DNA/0102_2HT-125minus.ab1")
fwd.fnames
?reverseComplement
fwd.reads = mclapply(fwd.fnames, loadread, trim, trim.cutoff, trim.segment, revcomp = FALSE, mc.cores = processors)
loadread <- function(fname, trim, trim.cutoff, trim.segment, revcomp){
read.abi = read.abif(fname)
read.sanger = makeBaseCalls(sangerseq(read.abi))
if(trim == TRUE){
trims = trim.mott(seq.abif, cutoff = trim.cutoff)
trim.start = trims["trim.start"][[1]]
trim.finish = trims["trim.finish"][[1]]
}else if(trim == FALSE){
trim.start = 1
trim.finish = length(read.sanger@primarySeq)
}
read.final = read.sanger@primarySeq[trim.start:trim.finish]
if(revcomp == FALSE){
return(read.final)
}else if(revcomp == TRUE){
return(reverseComplement(read.final))
}
return(read.final)
}
fwd.reads = mclapply(fwd.fnames, loadread, trim, trim.cutoff, trim.segment, revcomp = FALSE, mc.cores = processors)
fwd.reads
processors
processors = 4
fwd.reads = mclapply(fwd.fnames, loadread, trim, trim.cutoff, trim.segment, revcomp = FALSE, mc.cores = processors)
fwd.reads
names(fwd.reads) = fwd.fnames
fwd.reads
trim
fwd.reads = mclapply(fwd.fnames, loadread, trim = TRUE, trim.cutoff, trim.segment, revcomp = FALSE, mc.cores = processors)
fwd.reads
names(fwd.reads) = fwd.fnames
rev.reads = mclapply(rev.fnames, loadread, trim, trim.cutoff, trim.segment, revcomp = TRUE, mc.cores = processors)
rev.reads
trim
rev.reads = mclapply(rev.fnames, loadread, trim = TRUE, trim.cutoff, trim.segment, revcomp = TRUE, mc.cores = processors)
rev.reads
names(fwd.reads) = fwd.fnames
names(rev.reads) = rev.fnames
readset = DNAStringSet(c(fwd.reads, rev.reads))
readset
names(readset)
library(sangeranalyseR)
make.readset(fwd.fnames = fwd.fnames, rev.fnames = rev.fnames)
make.readset(fwd.fnames = fwd.fnames, rev.fnames = rev.fnames)
make.readset(fwd.fnames = fwd.fnames, rev.fnames = rev.fnames, trim = FALSE)
make.readset(fwd.fnames = fwd.fnames, rev.fnames = rev.fnames, trim = TRUE, trim.cutoff = 0.000001)
make.readset(fwd.fnames = fwd.fnames, rev.fnames = rev.fnames, trim = TRUE, trim.cutoff = 0.1)
library(sangeranalyseR)
make.readset(fwd.fnames = fwd.fnames, rev.fnames = rev.fnames, trim = TRUE, trim.cutoff = 0.1)
r = make.readset(fwd.fnames = fwd.fnames, rev.fnames = rev.fnames, trim = TRUE, trim.cutoff = 0.1)
r
m = merge.reads(r)
library(sangeranalyseR)
m = merge.reads(r)
library(sangeranalyseR)
m = merge.reads(r)
r
library(sangeranalyseR)
m = merge.reads(r)
m
plot(m$dendrogram)
?dendrogram
plot(m$dendrogram, leaflab="textlike")
?dendrogram
plot(m$dendrogram, horiz = TRUE)
names(r)
names(m)
m$consensus
m$alignment
BrowseSeqs(m$alignment)
m$differences
r = make.readset(fwd.fnames = fwd.fnames, rev.fnames = rev.fnames, trim = FALSE, trim.cutoff = 0.1)
m = merge.reads(r)
BrowseSeqs(m$alignment)
m$differences
?compareStrings
r[1]
compareStrings(r[1], r[5])
r[5]
m[1]
compareStrings(m$alignment[1], m$alignment[5])
compareStrings(m$alignment[2], m$alignment[5])
r = make.readset(fwd.fnames = fwd.fnames, rev.fnames = rev.fnames, trim = FALSE, trim.cutoff = 0.1)
?merge.reads
m = merge.reads(r, minInformation = 0.0, minReads = 1)
m$differences
BrowseSeqs(m$alignment)
?ConsensusSequence
library(sangeranalyseR)
m = merge.reads(r, minInformation = 0.0, minReads = 1)
BrowseSeqs(m$alignment)
m = merge.reads(r, minInformation = 0.0, minReads = 2)
BrowseSeqs(m$alignment)
m = merge.reads(r, minInformation = 0.0, minReads = 2)
library(sangeranalyseR)
m = merge.reads(r, minInformation = 0.0, minReads = 0)
m = merge.reads(r, minInformation = 0.0001, minReads = 0)
BrowseSeqs(m$alignment)
library(sangeranalyseR)
m = merge.reads(r, minInformation = 0.0001, minReads = 0)
library(sangeranalyseR)
m = merge.reads(r, minInformation = 0.0001, minReads = 0)
BrowseSeqs(m$alignment)
m = merge.reads(r, minInformation = 0.00, minReads = 1)
BrowseSeqs(m$alignment)
m = merge.reads(r, minInformation = 0.00, minReads = 4)
BrowseSeqs(m$alignment)
library(sangeranalyseR)
m = merge.reads(r, minInformation = 0.00, minReads = 4)
library(sangeranalyseR)
m = merge.reads(r, minInformation = 0.00, minReads = 4)
BrowseSeqs(m$alignment)
m = merge.reads(r, minInformation = 0.00, minReads = 1)
BrowseSeqs(m$alignment)
library(sangeranalyseR)
m = merge.reads(r, minInformation = 0.00, minReads = 1)
m = merge.reads(r)
BrowseSeqs(m$alignment)
m = merge.reads(r, minInformation = 0.01)
BrowseSeqs(m$alignment)
m = merge.reads(r, minInformation = 0.01, threshold = 0.0001)
BrowseSeqs(m$alignment)
m = merge.reads(r, minInformation = 0.99, threshold = 0.99)
BrowseSeqs(m$alignment)
m = merge.reads(r, minInformation = 0.99, threshold = 0.001)
BrowseSeqs(m$alignment)
m = merge.reads(r, minInformation = 0.0001, threshold = 0.99)
BrowseSeqs(m$alignment)
m = merge.reads(r, minInformation = 0.0001, threshold = 0.00000000)
BrowseSeqs(m$alignment)
m = merge.reads(r, minInformation = 0.75, threshold = 0.00000000)
BrowseSeqs(m$alignment)
m = merge.reads(r)
BrowseSeqs(m$alignment)
library(sangeranalyseR)
m = merge.reads(r)
BrowseSeqs(m$alignment)
m = merge.reads(r)
library(sangeranalyseR)
BrowseSeqs(m$alignment)
input.folder
processors = get.processors(processors)
abi.files = list.files(input.folder, pattern = "\\.ab1$", full.names = T, recursive = T)
processors = 4
processors = get.processors(processors)
abi.files = list.files(input.folder, pattern = "\\.ab1$", full.names = T, recursive = T)
abi.files
group.dataframe = get.group.dataframe(abi.files, forward.suffix, reverse.suffix)
library(sangeranalyseR)
group.dataframe = get.group.dataframe(abi.files, forward.suffix, reverse.suffix)
group.dataframe = sangeranalyseR:::get.group.dataframe(abi.files, forward.suffix, reverse.suffix)
group.dataframe
summaries = mclapply(list(group.dataframe$file.path),
summarise.abi.file,
trim.cutoff = trim.cutoff,
trim.segment = trim.segment,
secondary.peak.cutoff = secondary.peak.cutoff,
write.secondary.peak.files = FALSE,
processors = 1,
mc.cores = processors
)
list(group.dataframe$file.path)
summaries = mclapply(list(as.character(group.dataframe$file.path)),
summarise.abi.file,
trim.cutoff = trim.cutoff,
trim.segment = trim.segment,
secondary.peak.cutoff = secondary.peak.cutoff,
write.secondary.peak.files = FALSE,
processors = 1,
mc.cores = processors
)
list(as.character(group.dataframe$file.path))
list(as.character(group.dataframe$file.path))[[1]]
summaries = mclapply(list(as.character(group.dataframe$file.path))[[1]],
summarise.abi.file,
trim.cutoff = trim.cutoff,
trim.segment = trim.segment,
secondary.peak.cutoff = secondary.peak.cutoff,
write.secondary.peak.files = FALSE,
processors = 1,
mc.cores = processors
)
trim.cutoff = 0.1
trim.segment = 20
secondary.peak.cutoff = 0.33
summaries = mclapply(list(as.character(group.dataframe$file.path))[[1]],
summarise.abi.file,
trim.cutoff = trim.cutoff,
trim.segment = trim.segment,
secondary.peak.cutoff = secondary.peak.cutoff,
write.secondary.peak.files = FALSE,
processors = 1,
mc.cores = processors
)
warnings()
summaries = lapply(list(as.character(group.dataframe$file.path))[[1]],
summarise.abi.file,
trim.cutoff = trim.cutoff,
trim.segment = trim.segment,
secondary.peak.cutoff = secondary.peak.cutoff,
write.secondary.peak.files = FALSE,
processors = 1
)
library(sangeranalyseR)
input.file
inputfile
summarise.abi.file(inputfile)
warnings()
summarise.abi.file(inputfile)
inputfile
seq.abif = read.abif(inputfile)
seq = sangerseq(seq.abif)
seq = makeBaseCalls(seq) # for consistency we always make these from scratch
seq
if(write.secondary.peak.files == TRUE){
output.folder = dirname(inputfile)
prefix = basename(inputfile)
secondary.peaks = secondary.peaks(seq, secondary.peak.cutoff, output.folder, prefix, processors = processors)
}else if(write.secondary.peak.files == FALSE){
secondary.peaks = secondary.peaks(seq, secondary.peak.cutoff, processors = processors)
}else{
stop("Unknown option for write.secondary.peak.files. Should be TRUE or FALSE")
}
write.secondary.peak.files = FALSE
if(write.secondary.peak.files == TRUE){
output.folder = dirname(inputfile)
prefix = basename(inputfile)
secondary.peaks = secondary.peaks(seq, secondary.peak.cutoff, output.folder, prefix, processors = processors)
}else if(write.secondary.peak.files == FALSE){
secondary.peaks = secondary.peaks(seq, secondary.peak.cutoff, processors = processors)
}else{
stop("Unknown option for write.secondary.peak.files. Should be TRUE or FALSE")
}
secondary.peaks(seq)
?secondary.peaks
?primarySeq
basecalls = makeBaseCalls(seq, ratio = ratio)
seq
basecalls
warnings()
ratio
basecalls = makeBaseCalls(seq)
library(sangeranalyseR)
inputfile
seq
makeBaseCalls(seq)
warnings()
inputfile = "~/Desktop/testseq/Pan01/Raw sequencing files/DNA/0102_1HT-125minus.ab1"
makeBaseCalls(seq)
library(sangerseqR)
makeBaseCalls(seq)
makeBaseCalls(seq)
seq
seq = readsangerseq(inputfile)
makeBaseCalls(seq)
library(sangeranalyseR)
secondary.peaks(seq)
basecalls = makeBaseCalls(seq, ratio = ratio)
primary = primarySeq(basecalls)
secondary = secondarySeq(basecalls)
seqs = DNAStringSet(c(primary, secondary))
ratio = 0.33
basecalls = makeBaseCalls(seq, ratio = ratio)
primary = primarySeq(basecalls)
secondary = secondarySeq(basecalls)
seqs = DNAStringSet(c(primary, secondary))
ses
seqs
primary = primarySeq(basecalls, string = TRUE)
secondary = secondarySeq(basecalls, string = TRUE)
seqs = DNAStringSet(c(primary, secondary))
seqs
pa = AlignSeqs(seqs, iterations = 0, refinements = 0, verbose = FALSE, processors = processors)
pa = PairwiseAlignments(pa)
processors = 3
pa = AlignSeqs(seqs, iterations = 0, refinements = 0, verbose = FALSE, processors = processors)
pa = PairwiseAlignments(pa)
pa
mismatches = mismatchTable(pa)
r = data.frame("position" = mismatches$PatternStart, "primary.basecall" = mismatches$PatternSubstring, "secondary.basecall" = mismatches$SubjectSubstring)
r
summarise.abi.file(inputfile)
library(sangeranalyseR)
summarise.abi.file(inputfile)
seq.abif = read.abif(inputfile)
seq = sangerseq(seq.abif)
seq = makeBaseCalls(seq) # for consistency we always make these from scratch
seq
if(write.secondary.peak.files == TRUE){
output.folder = dirname(inputfile)
prefix = basename(inputfile)
secondary.peaks = secondary.peaks(seq, secondary.peak.cutoff, output.folder, prefix, processors = processors)
}else if(write.secondary.peak.files == FALSE){
secondary.peaks = secondary.peaks(seq, secondary.peak.cutoff, processors = processors)
}else{
stop("Unknown option for write.secondary.peak.files. Should be TRUE or FALSE")
}
write.secondary.peak.files = FALSE
if(write.secondary.peak.files == TRUE){
output.folder = dirname(inputfile)
prefix = basename(inputfile)
secondary.peaks = secondary.peaks(seq, secondary.peak.cutoff, output.folder, prefix, processors = processors)
}else if(write.secondary.peak.files == FALSE){
secondary.peaks = secondary.peaks(seq, secondary.peak.cutoff, processors = processors)
}else{
stop("Unknown option for write.secondary.peak.files. Should be TRUE or FALSE")
}
secondary.peak.cutoff = 0.33
if(write.secondary.peak.files == TRUE){
output.folder = dirname(inputfile)
prefix = basename(inputfile)
secondary.peaks = secondary.peaks(seq, secondary.peak.cutoff, output.folder, prefix, processors = processors)
}else if(write.secondary.peak.files == FALSE){
secondary.peaks = secondary.peaks(seq, secondary.peak.cutoff, processors = processors)
}else{
stop("Unknown option for write.secondary.peak.files. Should be TRUE or FALSE")
}
processors = 4
if(write.secondary.peak.files == TRUE){
output.folder = dirname(inputfile)
prefix = basename(inputfile)
secondary.peaks = secondary.peaks(seq, secondary.peak.cutoff, output.folder, prefix, processors = processors)
}else if(write.secondary.peak.files == FALSE){
secondary.peaks = secondary.peaks(seq, secondary.peak.cutoff, processors = processors)
}else{
stop("Unknown option for write.secondary.peak.files. Should be TRUE or FALSE")
}
secondary.peaks(seq)
basecalls = makeBaseCalls(seq, ratio = ratio)
primary = primarySeq(basecalls, string = TRUE)
secondary = secondarySeq(basecalls, string = TRUE)
seqs = DNAStringSet(c(primary, secondary))
seqs
pa = AlignSeqs(seqs, iterations = 0, refinements = 0, verbose = FALSE, processors = processors)
pa = PairwiseAlignments(pa)
mismatches = mismatchTable(pa)
r = data.frame("position" = mismatches$PatternStart, "primary.basecall" = mismatches$PatternSubstring, "secondary.basecall" = mismatches$SubjectSubstring)
if(!is.na(output.folder)){
if(dir.exists(output.folder)){
chromname = paste(file.prefix, "_", "chromatogram.pdf", sep='')
tablename = paste(file.prefix, "_", "secondary_peaks.csv", sep='')
chrom = chromatogram(basecalls, height = 2, showcalls = 'both', filename = file.path(output.folder, chromname))
write.csv(r, file = file.path(output.folder, tablename))
}else{
warning(sprintf("Couldn't find directory '%s', no files saved", output.folder))
}
}
output.folder = NA
pa = AlignSeqs(seqs, iterations = 0, refinements = 0, verbose = FALSE, processors = processors)
pa = PairwiseAlignments(pa)
mismatches = mismatchTable(pa)
r = data.frame("position" = mismatches$PatternStart, "primary.basecall" = mismatches$PatternSubstring, "secondary.basecall" = mismatches$SubjectSubstring)
if(!is.na(output.folder)){
if(dir.exists(output.folder)){
chromname = paste(file.prefix, "_", "chromatogram.pdf", sep='')
tablename = paste(file.prefix, "_", "secondary_peaks.csv", sep='')
chrom = chromatogram(basecalls, height = 2, showcalls = 'both', filename = file.path(output.folder, chromname))
write.csv(r, file = file.path(output.folder, tablename))
}else{
warning(sprintf("Couldn't find directory '%s', no files saved", output.folder))
}
}
r
library(sangeranalyseR)
?secondary.peaks
secondary.peaks(seq)
basecalls = makeBaseCalls(seq, ratio = ratio)
primary = primarySeq(basecalls, string = TRUE)
secondary = secondarySeq(basecalls, string = TRUE)
seqs = DNAStringSet(c(primary, secondary))
# these seuqences should be VERY similar...
pa = AlignSeqs(seqs, iterations = 0, refinements = 0, verbose = FALSE, processors = processors)
pa = PairwiseAlignments(pa)
mismatches = mismatchTable(pa)
r = data.frame("position" = mismatches$PatternStart, "primary.basecall" = mismatches$PatternSubstring, "secondary.basecall" = mismatches$SubjectSubstring)
pa
mismatchTable(pa)
?mismatchTable
pa = AlignSeqs(seqs, iterations = 0, refinements = 0, verbose = FALSE, processors = processors)
mistmatchTable(pa)
mismatchTable(pa)
pa = PairwiseAlignments(pa)
pa
mismatch(pa)
mismatchSummary(pa)
mismatchTable(pa)
input.file
inputfile
inputfile = ~/Desktop/testseq/Pan01/Raw sequencing files/DNA/0102_1HT-125minus.ab1
if = ""
