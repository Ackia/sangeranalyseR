devtools::load_all(".")
library(devtools)
library(sangeranalyseR)
?pairwiseAlignment
source("https://bioconductor.org/biocLite.R")
biocLite("DECIPHER")
library(DECIPHER)
seq
inputfile = readsangerseq("~/Desktop/testseq/Pan01/Raw sequencing files/DNA/0102_1HT-125minus.ab1")
seq = readsangerseq("~/Desktop/testseq/Pan01/Raw sequencing files/DNA/0102_1HT-125minus.ab1")
seq
seq = readsangerseq("~/Desktop/testseq/Pan01/Raw sequencing files/DNA/0102_1HT-125minus.ab1")
basecalls = makeBaseCalls(seq, ratio = ratio)
pa = pairwiseAlignment(primarySeq(basecalls), secondarySeq(basecalls), type = "global-local")
ratio = 0.33
basecalls = makeBaseCalls(seq, ratio = ratio)
pa = pairwiseAlignment(primarySeq(basecalls), secondarySeq(basecalls), type = "global-local")
pa
pa2 = AlignSeqs()
?AlignSeqs
pa2 = AlignSeqs(iterations = 0, refinements = 0)
DNAStringSet
?DNAStringSet
x0 <- c("#CTC-NACCAGTAT", "#TTGA", "TACCTAGAG")
x0
DNAStringSet(x0)
DNAStringSet(primarySeq(basecalls), secondarySeq(basecalls))
DNAStringSet(c(primarySeq(basecalls), secondarySeq(basecalls)))
primarySeq(basecalls)
BStringSet(c(primarySeq(basecalls), secondarySeq(basecalls)))
BStringSet(c(primarySeq(basecalls), secondarySeq(basecalls)), width = 854)
?AlignSeqs
db <- system.file("extdata", "Bacteria_175seqs.sqlite", package="DECIPHER")
dna <- SearchDB(db, remove="all")
dna
BStringSet(c(primarySeq(basecalls), secondarySeq(basecalls)), width = c
q1
seq1 = primarySeq(basecalls)
seq2 = secondarySeq(basecalls)
BStringSet(c(seq1, seq2))
length(seq1)
BStringSet(c(seq1, seq2), c(length(seq1), length(seq2)))
length(seq1)
length(seq2)
ss =BStringSet(c(seq1, seq2), c(length(seq1), length(seq2)))
ss
AlignSeqs(ss)
ss = DNAStringSet(c(seq1, seq2), c(length(seq1), length(seq2)))
ss
AlignSeqs(ss)
?pairwiseAlignment
pairwiseAlignment(ss)
seq1
seq2
ss = DNAStringSet(c(seq1, seq2), c(length(seq1), length(seq2)))
ss
ss[1]
ss[2]
db <- system.file("extdata", "Bacteria_175seqs.sqlite", package="DECIPHER")
dna <- SearchDB(db, remove="all")
dna
alignedDNA <- AlignSeqs(dna)
BrowseSeqs(alignedDNA, highlight=1)
seq1 <- paste(DNA_BASES[sample(1:4,5,replace=T)], collapse="")
seq2 <- paste(DNA_BASES[sample(1:4,5,replace=T)], collapse="")
seq1
seq2
myseqs <- DNAStringSet(c(seq1,seq2))
myseqs
seq1 <- paste(DNA_BASES[sample(1:4,5,replace=T)], collapse="")
seq2 <- paste(DNA_BASES[sample(1:4,15,replace=T)], collapse="")
seq1
seq2
myseqs <- DNAStringSet(c(seq1,seq2))
myseqs
seq1 = primarySeq(basecalls)
seq2 = secondarySeq(basecalls)
seq1
seq@primarySeq
seq1@shared
seq1@offset
seq1@offset
as.character(seq1)
s1 as.character(seq1)
s1 = as.character(seq1)
s2 = as.character(seq2)
s2
myseqs <- DNAStringSet(c(seq1,seq2))
myseqs
myseqs <- DNAStringSet(c(s1,s2))
myseqs
PairwiseAlignments(myseqs)
PairwiseAlignments(myseqs)
myseqs[[1]]
PairwiseAlignments(myseqs[[1]], myseqs[[2]])
PairwiseAlignments(myseqs)
myseqs <- DNAStringSet(c(seq1,seq2))
basecalls = makeBaseCalls(seq, ratio = ratio)
primary = as.character(primarySeq(basecalls))
secondary = as.character(secondarySeq(basecalls))
seqs = DNAStringSet(c(primary, secondary))
seqs
pa = AlignSeqs(seqs)
pa = AlignSeqs(seqs, iterations = 0, refinements = 0)
pa = AlignSeqs(seqs, iterations = 0, refinements = 0, verbose = FALSE)
# make secondary basecalls, and align them to the original sequence
basecalls = makeBaseCalls(seq, ratio = ratio)
primary = as.character(primarySeq(basecalls))
secondary = as.character(secondarySeq(basecalls))
seqs = DNAStringSet(c(primary, secondary))
# these seuqences should be VERY similar...
pa = AlignSeqs(seqs, iterations = 0, refinements = 0, verbose = FALSE)
pa = PairwiseAlignments(pa)
mismatches = mismatchTable(pa)
mismatches
library(sangeranalyseR)
inputfile
summarise.abi.file(inputfile = inputfile)
inputfile
inputfile = "~/Desktop/testseq/Pan01/Raw sequencing files/DNA/0102_1HT-125minus.ab1"
summarise.abi.file(inputfile = inputfile)
library(sangeranalyseR)
summarise.abi.file(inputfile = inputfile)
summarise.abi.file(inputfile = inputfile)
library(sangeranalyseR)
summarise.abi.file(inputfile = inputfile)
summarise.abi.file(inputfile = inputfile)
?AlignSeqs
seq
typeof(seq)
class(seq)
as.character(seq)
seq@primarySeq
as.character(seq@primarySeq)
inputfile
fwd1 = inputfile
fwd2 = "~/Desktop/testseq/Pan01/Raw sequencing files/DNA/0102_2HT-125minus.ab1"
rev1 = "~/Desktop/testseq/Pan01/Raw sequencing files/DNA/0102_1HT-30plus.ab1"
rev2 = "~/Desktop/testseq/Pan01/Raw sequencing files/DNA/0102_2HT-30plus.ab1"
fwd1.seq = readsangerseq(fwd1)
fwd2.seq = readsangerseq(fwd2)
rev1.seq = readsangerseq(rev1)
rev2.seq = readsangerseq(rev2)
reverseComplement(rev2.seq)
?reverseComplement
reverseComplement(rev2.seq@primarySeq)
pairwiseAlignment(fwd1.seq, rev1.seq)
?pairwiseAlignment
pairwiseAlignment(fwd1.seq@primarySeq, rev1.seq@primarySeq)
pairwiseAlignment(fwd1.seq@primarySeq, reverseComplement(rev1.seq@primarySeq))
pairwiseAlignment(fwd1.seq@primarySeq, reverseComplement(rev1.seq@primarySeq), type = "global-local")
?AlignSeqs
as.character(fwd1.seq)
fwd1.seq
fwd.seqs = c(fwd1.seq, fwd2.seq)
fwd.seq
fwd.seqs
a = fwd1.seq@primarySeq
class(a)
library(sangeranalyseR)
fwd.seqs
fwd = lapply(fwd.seqs, sangeranalyseR:::get.primaryseq.xstring)
library(sangeranalyseR)
fwd = lapply(fwd.seqs, sangeranalyseR:::get.primaryseq.xstring)
fwd
return(reverseComplement(seq@primarySeq))
reverseComplement(fwd.1@primarySeq)
reverseComplement(fwd1@primarySeq)
reverseComplement(fwd1.seq@primarySeq)
reverseComplement(rev1@primarySeq)
reverseComplement(rev1.seq@primarySeq)
fwd.seqs
fwd = lapply(fwd.seqs, get.primaryseq.xstring, revcomp = FALSE)
rev = lapply(rev.seqs, get.primaryseq.xstring, revcomp = TRUE)
fwd = lapply(fwd.seqs, sangeranalyseR:::get.primaryseq.xstring, revcomp = FALSE)
rev = lapply(rev.seqs, sangeranalyseR:::get.primaryseq.xstring, revcomp = TRUE)
fwd.seqs
rev.seqs = c(rev1.seq, rev2.seq)
fwd = lapply(fwd.seqs, sangeranalyseR:::get.primaryseq.xstring, revcomp = FALSE)
rev = lapply(rev.seqs, sangeranalyseR:::get.primaryseq.xstring, revcomp = TRUE)
library(sangeranalyseR)
fwd = lapply(fwd.seqs, sangeranalyseR:::get.primaryseq.xstring, revcomp = FALSE)
rev = lapply(rev.seqs, sangeranalyseR:::get.primaryseq.xstring, revcomp = TRUE)
fwd
rev
seqs = DNAStringSet(c(fwd.seqs, rev.seqs))
library(sangeranalyseR)
fwd = lapply(fwd.seqs, sangeranalyseR:::get.primaryseq.xstring, revcomp = FALSE)
rev = lapply(rev.seqs, sangeranalyseR:::get.primaryseq.xstring, revcomp = TRUE)
fwd = lapply(fwd.seqs, sangeranalyseR:::get.primaryseq.character, revcomp = FALSE)
rev = lapply(rev.seqs, sangeranalyseR:::get.primaryseq.character, revcomp = TRUE)
fwd
rev
c(fwd, rev)
seqs = DNAStringSet(c(fwd.seqs, rev.seqs))
seqs = DNAStringSet(c(fwd, rev))
library(sangeranalyseR)
fwd = lapply(fwd.seqs, sangeranalyseR:::get.primaryseq.character, revcomp = FALSE)
rev = lapply(rev.seqs, sangeranalyseR:::get.primaryseq.character, revcomp = TRUE)
fwd = lapply(fwd.seqs, sangeranalyseR:::get.primaryseq.xstring, revcomp = FALSE)
rev = lapply(rev.seqs, sangeranalyseR:::get.primaryseq.xstring, revcomp = TRUE)
fwd
rev
c(fwd, rev)
seqs = DNAStringSet(c(fwd, rev))
seqs
pa = AlignSeqs(seqs)
pa
plot(pa)
AlignSeqs
?AlignSeqs
BrowseSeqs(pa)
consensusString(pa)
?consensusString
pa@pool
pa@ranges
pa@metadata
names(pa)
pa@elementMetadata
pa@pool
a = pa@pool
a@.link_to_cached_object_list
??Orient
library(DECIPHER)
?ConsensusSequence
pa
ConsensusSequence(pa)
mismatches = mismatchTable(PairwiseAlignments(pa))
pa
PairwiseAlignments(pa)
ConsensusSequence(pa)
biocLite("DECIPHER")
libray(DECIPTHER)
library(DECIPHER)
methods(DECIPHER)
??DECIPHER
seqs = DNAStringSet(c(fwd.seqs, rev.seqs))
pa = AlignSeqs(seqs)
consensus = ConsensusSequence(pa)
consensus
pa
pa[[1]]
pa[[2]]
n.pairwise.diffs <- function(seq1, seq2){
# pairwise differences assume seq1 and seq2 are aligned
pa = pairwiseAlignments(seq1, seq2)
return(nrows(mismatches(pa)))
}
consensus
n.pairwise.diffs(pa[[1]], pa[[1]])
n.pairwise.diffs <- function(seq1, seq2){
# pairwise differences assume seq1 and seq2 are aligned
pa = PairwiseAlignments(seq1, seq2)
return(nrows(mismatches(pa)))
}
n.pairwise.diffs(pa[[1]], pa[[1]])
n.pairwise.diffs <- function(seq1, seq2){
# pairwise differences assume seq1 and seq2 are aligned
pa = PairwiseAlignments(seq1, seq2)
return(nrow(mismatches(pa)))
}
n.pairwise.diffs(pa[[1]], pa[[1]])
n.pairwise.diffs <- function(seq1, seq2){
# pairwise differences assume seq1 and seq2 are aligned
pa = PairwiseAlignments(seq1, seq2)
return(nrow(mismatchTable(pa)))
}
n.pairwise.diffs(pa[[1]], pa[[1]])
n.pairwise.diffs(pa[[1]], pa[[2]])
n.pairwise.diffs(pa[[1]], pa[[3]])
pa[[3]]
n.pairwise.diffs(pa[[1]], consensus)
consensus
pa[[1]]
rev = lapply(rev.seqs, get.primaryseq.xstring, revcomp = TRUE)
seqs = DNAStringSet(c(fwd.seqs, rev.seqs))
aln = AlignSeqs(seqs)
consensus = ConsensusSequence(aln)[[1]]
n.pairwise.diffs(pa[[1]], consensus)
n.pairwise.diffs(pa[[2]], consensus)
n.pairwise.diffs(pa[[3]], consensus)
n.pairwise.diffs(pa[[4]], consensus)
PairwiseAlignments(pa[[3]], consensus)
pa = PairwiseAlignments(pa[[3]], consensus)
mismatchTable(pa)
pa = PairwiseAlignments(consensus, pa[[3]])
PairwiseAlignments(pa[[3]], consensus)
consensus
PairwiseAlignments(pa[[3]], consensus)
library(sangeranalyseR)
fwd2 = "~/Desktop/testseq/Pan01/Raw sequencing files/DNA/0102_2HT-125minus.ab1"
rev1 = "~/Desktop/testseq/Pan01/Raw sequencing files/DNA/0102_1HT-30plus.ab1"
rev2 = "~/Desktop/testseq/Pan01/Raw sequencing files/DNA/0102_2HT-30plus.ab1"
fwd1 = "~/Desktop/testseq/Pan01/Raw sequencing files/DNA/0102_1HT-125minus.ab1"
fwd.seqs = c(fwd1, fwd2)
rev.seqs = c(rev1, rev2)
fwd = lapply(fwd.seqs, get.primaryseq.xstring, revcomp = FALSE)
rev = lapply(rev.seqs, get.primaryseq.xstring, revcomp = TRUE)
seqs = DNAStringSet(c(fwd.seqs, rev.seqs))
aln = AlignSeqs(seqs)
consensus = ConsensusSequence(aln)[[1]]
fwd = lapply(fwd.seqs, sangeranalyseR:::get.primaryseq.xstring, revcomp = FALSE)
rev = lapply(rev.seqs, sangeranalyseR:::get.primaryseq.xstring, revcomp = TRUE)
seqs = DNAStringSet(c(fwd.seqs, rev.seqs))
aln = AlignSeqs(seqs)
consensus = ConsensusSequence(aln)[[1]]
fwd.seqs
fwd1.seq = readsangerseq(fwd1)
fwd2.seq = readsangerseq(fwd2)
rev1.seq = readsangerseq(rev1)
rev2.seq = readsangerseq(rev2)
fwd.seqs = c(fwd1.seq, fwd2.seq)
rev.seqs = c(rev1.seq, rev2.seq)
fwd = lapply(fwd.seqs, sangeranalyseR:::get.primaryseq.xstring, revcomp = FALSE)
rev = lapply(rev.seqs, sangeranalyseR:::get.primaryseq.xstring, revcomp = TRUE)
seqs = DNAStringSet(c(fwd.seqs, rev.seqs))
aln = AlignSeqs(seqs)
consensus = ConsensusSequence(aln)[[1]]
fwd
rev
DNAStringSet(fwd)
seqs = DNAStringSet(c(fwd, rev))
aln = AlignSeqs(seqs)
consensus = ConsensusSequence(aln)[[1]]
library(DECIPHER)
seqs = DNAStringSet(c(fwd, rev))
aln = AlignSeqs(seqs)
consensus = ConsensusSequence(aln)[[1]]
aln
aln@elementMetadata
aln@metadata
consensus
fwd.seqs
s = fwd.seqs[[1]]
s
s@primarySeqID
names(aln)
names(aln) = c('a', 'b')
aln
BrowseSeqs(aln)
s
a
s
s@primarySeqID
s@primarySeq
s@secondarySeqID
s@traceMatrix
fwd.seqs
names(fwd.seqs)
names(fwd.seqs) = c("egg", "ham")
fwd.seqs
names(aln) = c(names(fwd.seqs), names(rev.seqs))
aln
BrowseSeqs(aln)
fwd = lapply(fwd.seqs, get.primaryseq.xstring, revcomp = FALSE)
rev = lapply(rev.seqs, get.primaryseq.xstring, revcomp = TRUE)
seqs = DNAStringSet(c(fwd, rev))
aln = AlignSeqs(seqs)
names(aln) = c(names(fwd.seqs), names(rev.seqs))
consensus = ConsensusSequence(aln)[[1]]
aln
consensus
aln = c(aln, consensus)
aln = c(aln, DNAStringSet(consensus))
aln
?mismatchSummary
mismatchSummary(aln)
a = aligned(aln)
a = pattern(aln)
aligned(aln)
as.character(aln)
pattern <- AAString("LAND")
subject <- AAString("LEAVES")
nw1 <- pairwiseAlignment(pattern, subject, substitutionMatrix = "BLOSUM50", gapOpening = 3, gapExtension = 1)
nw1
mismatchTable(as.character(aln))
mismatchSummary(as.character(aln))
as.character(aln)
matrix(as.character(aln))
mismatchSummary(matrix(as.character(aln)))
compareStrings(aln[[1]], aln[[2]])
compareStrings(aln[[1]], aln[[3]])
compareStrings(aln[[1]], aln[[4]])
compareStrings(aln[[1]], consensus)
aln
compareStrings(aln[[1]], aln[[2]])
compareStrings(aln[[1]], consensus)
compareStrings(aln[[2]], consensus)
compareStrings(aln[[3]], consensus)
compareStrings(aln[[4]], consensus)
?alnseqs
?AlignSeqs
?ConsensusSequence
length(seqs)
1/4
1.111/4
minInformation = 1.0
consensus = ConsensusSequence(aln, minInformation = minInformation)[[1]]
consensus
aln
consensus = ConsensusSequence(aln, minInformation = minInformation)
consensus
consensus = ConsensusSequence(aln, minInformation = 100)
consensus = ConsensusSequence(aln, minInformation = 1.0)
consensus = ConsensusSequence(aln, minInformation = 100)
consensus
consensus = ConsensusSequence(aln, minInformation = 0.9)
consensus
consensus = ConsensusSequence(aln, minInformation = 0.9, ignoreNonBases = FALSE)
consensus
consensus = ConsensusSequence(aln, minInformation = 0.9, ignoreNonBases = TRUE)
consensus
fwd = lapply(fwd.seqs, get.primaryseq.xstring, revcomp = FALSE)
rev = lapply(rev.seqs, get.primaryseq.xstring, revcomp = TRUE)
seqs = DNAStringSet(c(fwd, rev))
fwd = lapply(fwd.seqs, sangeranalyseR:::get.primaryseq.xstring, revcomp = FALSE)
rev = lapply(rev.seqs, sangeranalyseR:::get.primaryseq.xstring, revcomp = TRUE)
seqs = DNAStringSet(c(fwd.seqs, rev.seqs))
aln = AlignSeqs(seqs)
consensus = ConsensusSequence(aln)[[1]]
aln
consensus
ConsensusSequence
seq1 = "-------AAAAAAAA"
seq2 = "AAAAAAATTTTTAAA"
DNAStringSet(c(seq1, seq2))
aln = DNAStringSet(c(seq1, seq2))
ConsensusSequence(aln)
ConsensusSequence(aln, threshold = 0.0, minInformation = 1.0)
ConsensusSequence(aln, threshold = 0.0, minInformation = 1.0, ignoreNonBases = FALSE)
ConsensusSequence(aln, threshold = 0.0, minInformation = 1.0, ignoreNonBases = TRUE)
biocLite()
library(sangeranalyseR)
version
source("https://bioconductor.org/biocLite.R")
biocLite()
?BiocUpgrade
biocLite("BiocUpgrade")
library(DECIPHER)
ConsensusSequence(aln, threshold = 0.0, minInformation = 1.0, ignoreNonBases = FALSE)
library(sangeranalyseR)
fwd2 = "~/Desktop/testseq/Pan01/Raw sequencing files/DNA/0102_2HT-125minus.ab1"
rev1 = "~/Desktop/testseq/Pan01/Raw sequencing files/DNA/0102_1HT-30plus.ab1"
rev2 = "~/Desktop/testseq/Pan01/Raw sequencing files/DNA/0102_2HT-30plus.ab1"
fwd1 = "~/Desktop/testseq/Pan01/Raw sequencing files/DNA/0102_1HT-125minus.ab1"
fwd1.seq = readsangerseq(fwd1)
rev1.seq = readsangerseq(rev1)
rev2.seq = readsangerseq(rev2)
fwd.seqs = c(fwd1.seq, fwd2.seq)
rev.seqs = c(rev1.seq, rev2.seq)
fwd = lapply(fwd.seqs, sangeranalyseR:::get.primaryseq.xstring, revcomp = FALSE)
rev = lapply(rev.seqs, sangeranalyseR:::get.primaryseq.xstring, revcomp = TRUE)
seqs = DNAStringSet(c(fwd.seqs, rev.seqs))
seqs = DNAStringSet(c(fwd, rev))
aln = AlignSeqs(seqs)
consensus = ConsensusSequence(aln)[[1]]
consensus
seq1 = "-------AAAAAAAA"
seq2 = "AAAAAAATTTTTAAA"
DNAStringSet(c(seq1, seq2))
aln = DNAStringSet(c(seq1, seq2))
ConsensusSequence(aln)
?ConsensusSequence
