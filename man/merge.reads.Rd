% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/merge.read.pair.R
\name{merge.reads}
\alias{merge.reads}
\title{Merge fwd and reverse reads into a single sequence}
\usage{
\method{merge}{reads}(fwd.seqs, rev.seqs, ref.aa.seq = NULL,
  minInformation = 1, minReads = 0, processors = NULL,
  genetic.code = GENETIC_CODE)
}
\arguments{
\item{fwd.seqs}{a list of forward sequences, each should be a sangerseq s4 object from the sangerseqR package. These sequences will not be reverse-complemented before alignment.}

\item{rev.seqs}{a list of reverse sequences, each should be a sangerseq s4 object from the sangerseqR package. These sequences will be reverse-complemented before alignment.}

\item{ref.aa.seq}{an amino acid reference sequence supplied as a string or an AAString object. If your sequences are protein-coding DNA seuqences, and you want to have frameshifts automatically detected and corrected, supply a reference amino acid sequence via this argument. If this argument is supplied, the sequences are then kept in frame for the alignment step. Fwd sequences are assumed to come from the sense (i.e. coding, or "+") strand.}

\item{minInformation}{minimum fraction of the sequences required to call a consensus sequence at any given position (see the ConsensusSequence() function from DECIPHER for more information). Defaults to 1.0 for this function, implying that the consensus sequence is only called when all fwd and rev reads overlap.}

\item{minReads}{minimum number of reads that are required to call a consensus sequence at any given position. This can be used in place of minInformation if you set minInformation to 0.0. For example, if you expect to have non-overlapping reads making up your consensus, but only wish to call a consensus where at least two reads overlap, set minInformation to 0.0 and minReads to 2. If you set both minInformation and minReads, the value corresponding to the larger number of reads will be used.}

\item{processors}{The number of processors to use, or NULL (the default) for all available processors}

\item{genetic.code}{Named character vector in the same format as GENETIC_CODE (the default), which represents the standard genetic code. This is the code with which the function will attempt to translate your DNA sequences. You can get an appropriate vector with the getGeneticCode() function. The default is the standard code.}
}
\value{
a list with the following components:
             1. indel.df: If you supplied an amino acid reference sequence, this data frame will contain the number of insertions and deletions made to correct the frame of your reads, plus the distance of each read's best translation from the reference sequence.
}
\description{
This function attempts to merge any number of forward and reverse sequences into a single consensus sequence. It calculates a number of statistics that should help you decide whether a sensible consensus sequence exists for your data.
Note that sequence names can be provided via the names on the input lists. If this is done, the names will be preserved in the output data. Otherwise, sequences will be called: fwd_1, fwd_2, etc.
1. An alignment of the forward and reverse reads (to view, use the BrowseSeqs() function from DECIPHER), as an XStringSet object. This alignment includes the aligned consensus sequence calculated below as "consensus"
2. A consensus sequence (as an XString obejct) calculated from the alignment. This sequence ignores leading and trailing gaps in the alignment. Calculation of the consensus can be controlled with minReads and minInformation options. Note, this is not the same as the consensus you would see using BrowseSeqs() on the alignment, which is calculated differently.
3. A data frame that shows the number of mismatches of each sequence to the consensus
4. A distance matrix of all input reads to each other (ignoring all alignment gaps)
5. A dendrogram depicting the distance matrix, use plot() to view it.
}
\keyword{alignment,}
\keyword{merge,}
\keyword{reads,}
\keyword{sequence}

